/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../src/directives/long-press.directive';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
export class Wrapper_LongPressDirective {
  /*private*/ _eventHandler:Function;
  context:import0.LongPressDirective;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  constructor() {
    this._changed = false;
    this.context = new import0.LongPressDirective();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
  }
  check_duration(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.duration = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_1:any = this.context.press;
    if (import3.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      view.renderer.setElementClass(el,'press',currVal_1);
      this._expr_1 = currVal_1;
    }
    const currVal_2:any = this.context.isLongPress;
    if (import3.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      view.renderer.setElementClass(el,'longpress',currVal_2);
      this._expr_2 = currVal_2;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'mousedown')) {
      const pd_sub_0:any = ((<any>this.context.onMouseDown($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'mousemove')) {
      const pd_sub_1:any = ((<any>this.context.onMouseMove($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'mouseup')) {
      const pd_sub_2:any = ((<any>this.context.onMouseUp()) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.longPress.subscribe(_eventHandler.bind(view,'longPress'))); }
    if (emit1) { (this.subscription1 = this.context.longPressing.subscribe(_eventHandler.bind(view,'longPressing'))); }
    if (emit2) { (this.subscription2 = this.context.longPressEnd.subscribe(_eventHandler.bind(view,'longPressEnd'))); }
  }
}