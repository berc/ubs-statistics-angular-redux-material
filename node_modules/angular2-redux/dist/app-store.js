"use strict";
var Observable_1 = require("rxjs/Observable");
// ensure required operators are enabled
require("rxjs/add/operator/map");
require("rxjs/add/operator/distinctUntilChanged");
require("rxjs/add/observable/from");
/**
 * Wrapper for app store
 */
var AppStore = (function () {
    function AppStore(store) {
        this.store$ = Observable_1.Observable.from(store);
        this.getState = function () {
            return store.getState();
        };
        this.subscribe = function (subscriber) {
            // decorate the subscriber with the state passed in as a parameter
            return store.subscribe(function () { return subscriber(store.getState()); });
        };
        this.dispatch = function (action) {
            return store.dispatch(action);
        };
        this.createDispatcher = function (actionCreator, context) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                return store.dispatch(actionCreator.call.apply(actionCreator, [context].concat(args)));
            };
        };
    }
    AppStore.prototype.select = function (keyOrSelector) {
        if (typeof keyOrSelector === "string" || typeof keyOrSelector === "number"
            || typeof keyOrSelector === "symbol") {
            return this.store$.map(function (state) { return state[keyOrSelector]; }).distinctUntilChanged();
        }
        else if (typeof keyOrSelector === "function") {
            return this.store$.map(keyOrSelector).distinctUntilChanged();
        }
        else {
            throw new TypeError("Unknown Parameter Type: "
                + ("Expected type of function or valid key type, got " + typeof keyOrSelector));
        }
    };
    return AppStore;
}());
exports.AppStore = AppStore;
