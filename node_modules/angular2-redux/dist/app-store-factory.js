"use strict";
var app_store_1 = require("./app-store");
var redux_1 = require("redux");
var thunkMiddleware = require("redux-thunk");
/* tslint:disable */
function applyDevTools(debug) {
    // default to window query param
    var isDebug = false;
    // allow overriding with a boolean or function
    if (debug == undefined) {
        isDebug = window && !!window.location.href.match(/[?&]debug=([^&]+)\b/);
    }
    else {
        if (debug instanceof Function) {
            isDebug = debug();
        }
        else {
            isDebug = debug;
        }
    }
    // config the dev tools extension is installed
    isDebug = isDebug && window && window["devToolsExtension"];
    // only apply is dev tools is installed
    return isDebug ? window["devToolsExtension"]() : function (f) { return f; };
}
exports.applyDevTools = applyDevTools;
/* tslint:enable */
/**
 * Factory for app store
 */
function createAppStoreFactory(reducers, additionalMiddlewares) {
    return createAppStoreFactoryWithOptions({
        reducers: reducers,
        additionalMiddlewares: additionalMiddlewares
    });
}
exports.createAppStoreFactory = createAppStoreFactory;
function createAppStoreFactoryWithOptions(_a) {
    var reducers = _a.reducers, _b = _a.additionalMiddlewares, additionalMiddlewares = _b === void 0 ? [] : _b, _c = _a.debug, debug = _c === void 0 ? undefined : _c;
    return function () {
        // Figure out reducers
        var reducersToUse = reducers;
        if (typeof reducersToUse === "object") {
            // it's not a single reducer so we need to combine the reducers on the object properties
            reducersToUse = redux_1.combineReducers(reducersToUse);
        }
        var thunkMiddlewareToUse = thunkMiddleware;
        // Fix for import issues
        if (thunkMiddlewareToUse && thunkMiddlewareToUse["default"]) {
            thunkMiddlewareToUse = thunkMiddlewareToUse["default"];
        }
        var middlewareEnhancer = redux_1.applyMiddleware.apply(void 0, [thunkMiddlewareToUse].concat(additionalMiddlewares));
        var enhancers = redux_1.compose(middlewareEnhancer, applyDevTools(debug));
        var createStoreWithEnhancers = enhancers(redux_1.createStore);
        var reduxAppStore = createStoreWithEnhancers(reducersToUse);
        // const reduxAppStore = createStore(reducers, undefined, enhancers); // new API (not typed yet)
        return new app_store_1.AppStore(reduxAppStore);
    };
}
exports.createAppStoreFactoryWithOptions = createAppStoreFactoryWithOptions;
;
